;
; File generated by cc65 v 2.19 - Git 216bb22
;
	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_pad_poll
	.import		_pal_fade_to
	.export		_bankLevel
	.export		_bankBuffer
	.export		_frisk_down_0_data
	.export		_frisk_down_1_data
	.export		_frisk_down_2_data
	.export		_frisk_left_0_data
	.export		_frisk_left_1_data
	.export		_frisk_right_0_data
	.export		_frisk_right_1_data
	.export		_frisk_up_0_data
	.export		_frisk_up_1_data
	.export		_frisk_up_2_data
	.export		_frisk
	.export		_flowey_laugh_to_0_data
	.export		_flowey_laugh_to_1_data
	.export		_flowey_laugh_to_2_data
	.export		_flowey_laugh_to
	.export		_flowey_laugh_0_data
	.export		_flowey_laugh_1_data
	.export		_flowey_laugh
	.export		_flowey_talk_0_data
	.export		_flowey_talk_1_data
	.export		_flowey_talk
	.export		_player_x
	.export		_player_y
	.export		_pad1
	.export		_frisk_frame
	.export		_frisk_frame_wait
	.export		_frisk_face
	.export		_map_frisk_collison
	.export		_state
	.export		_tempL
	.export		_tempR
	.export		_tempT
	.export		_tempD
	.export		_pal_had_fade_not
	.export		_frisk_map_box
	.export		_LEFT_COLLISON
	.export		_RIGHT_COLLISON
	.export		_UP_COLLISON
	.export		_DOWN_COLLISON
	.export		_palette
	.export		_frisk_frame_change
	.export		_main

.segment	"DATA"

_player_x:
	.byte	$78
_player_y:
	.byte	$C0
_frisk_frame:
	.byte	$00
_frisk_frame_wait:
	.byte	$00
_frisk_face:
	.byte	$01
_map_frisk_collison:
	.byte	$00
_pal_had_fade_not:
	.byte	$00

.segment	"RODATA"

_frisk_down_0_data:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$00
	.byte	$80
_frisk_down_1_data:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$19
	.byte	$0B
	.byte	$00
	.byte	$80
_frisk_down_2_data:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$0D
	.byte	$00
	.byte	$08
	.byte	$19
	.byte	$0E
	.byte	$00
	.byte	$80
_frisk_left_0_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$13
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$15
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$16
	.byte	$00
	.byte	$80
_frisk_left_1_data:
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$17
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$19
	.byte	$1A
	.byte	$00
	.byte	$80
_frisk_right_0_data:
	.byte	$08
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$08
	.byte	$10
	.byte	$13
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$14
	.byte	$40
	.byte	$08
	.byte	$18
	.byte	$15
	.byte	$40
	.byte	$00
	.byte	$18
	.byte	$16
	.byte	$40
	.byte	$80
_frisk_right_1_data:
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$40
	.byte	$08
	.byte	$09
	.byte	$11
	.byte	$40
	.byte	$00
	.byte	$09
	.byte	$12
	.byte	$40
	.byte	$08
	.byte	$11
	.byte	$17
	.byte	$40
	.byte	$00
	.byte	$11
	.byte	$18
	.byte	$40
	.byte	$08
	.byte	$19
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$19
	.byte	$1A
	.byte	$40
	.byte	$80
_frisk_up_0_data:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$1B
	.byte	$00
	.byte	$09
	.byte	$18
	.byte	$07
	.byte	$40
	.byte	$01
	.byte	$18
	.byte	$08
	.byte	$40
	.byte	$80
_frisk_up_1_data:
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$1F
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$1B
	.byte	$00
	.byte	$09
	.byte	$19
	.byte	$22
	.byte	$40
	.byte	$01
	.byte	$19
	.byte	$23
	.byte	$40
	.byte	$80
_frisk_up_2_data:
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$1F
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$19
	.byte	$23
	.byte	$00
	.byte	$80
_frisk:
	.addr	_frisk_down_0_data
	.addr	_frisk_down_1_data
	.addr	_frisk_down_0_data
	.addr	_frisk_down_2_data
	.addr	_frisk_up_0_data
	.addr	_frisk_up_1_data
	.addr	_frisk_up_0_data
	.addr	_frisk_up_2_data
	.addr	_frisk_left_0_data
	.addr	_frisk_left_1_data
	.addr	_frisk_left_0_data
	.addr	_frisk_left_1_data
	.addr	_frisk_right_0_data
	.addr	_frisk_right_1_data
	.addr	_frisk_right_0_data
	.addr	_frisk_right_1_data
_flowey_laugh_to_0_data:
	.byte	$00
	.byte	$08
	.byte	$25
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_laugh_to_1_data:
	.byte	$00
	.byte	$08
	.byte	$2B
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$2C
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_laugh_to_2_data:
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2E
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$2F
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$30
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_laugh_to:
	.addr	_flowey_laugh_to_0_data
	.addr	_flowey_laugh_to_1_data
	.addr	_flowey_laugh_to_2_data
_flowey_laugh_0_data:
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2E
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$2F
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$30
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_laugh_1_data:
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2E
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$31
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_laugh:
	.addr	_flowey_laugh_0_data
	.addr	_flowey_laugh_1_data
_flowey_talk_0_data:
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$26
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_talk_1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$28
	.byte	$01
	.byte	$80
_flowey_talk:
	.addr	_flowey_talk_0_data
	.addr	_flowey_talk_1_data
_LEFT_COLLISON:
	.byte	$01
_RIGHT_COLLISON:
	.byte	$02
_UP_COLLISON:
	.byte	$04
_DOWN_COLLISON:
	.byte	$08
_palette:
	.byte	$14
	.byte	$10
	.byte	$0F
	.byte	$30
	.byte	$14
	.byte	$10
	.byte	$0F
	.byte	$27
	.byte	$14
	.byte	$06
	.byte	$27
	.byte	$2C
	.byte	$14
	.byte	$06
	.byte	$27
	.byte	$2C
	.byte	$14
	.byte	$06
	.byte	$27
	.byte	$2C
	.byte	$14
	.byte	$27
	.byte	$0F
	.byte	$2A
	.byte	$14
	.byte	$10
	.byte	$0F
	.byte	$27
	.byte	$14
	.byte	$06
	.byte	$27
	.byte	$2C

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
_pad1:
	.res	1,$00
_state:
	.res	1,$00
_tempL:
	.res	1,$00
_tempR:
	.res	1,$00
_tempT:
	.res	1,$00
_tempD:
	.res	1,$00
_frisk_map_box:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ frisk_frame_change (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_frisk_frame_change: near

.segment	"CODE"

;
; if (frisk_frame_wait == 10){
;
	ldx     #$00
	lda     _frisk_frame_wait
	cmp     #$0A
	jsr     booleq
	jeq     L0002
;
; frisk_frame_wait=0;
;
	ldx     #$00
	lda     #$00
	sta     _frisk_frame_wait
;
; if(frisk_frame<3)
;
	ldx     #$00
	lda     _frisk_frame
	cmp     #$03
	jsr     boolult
	jeq     L0003
;
; frisk_frame = frisk_frame+1;
;
	ldx     #$00
	lda     _frisk_frame
	jsr     incax1
	ldx     #$00
	sta     _frisk_frame
;
; else
;
	jmp     L0004
;
; frisk_frame = 0;
;
L0003:	ldx     #$00
	lda     #$00
	sta     _frisk_frame
;
; else
;
L0004:	jmp     L0005
;
; frisk_frame_wait = frisk_frame_wait + 1;
;
L0002:	ldx     #$00
	lda     _frisk_frame_wait
	jsr     incax1
	ldx     #$00
	sta     _frisk_frame_wait
;
; }
;
L0005:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; music_play(0);
;
	lda     #$00
	jsr     _music_play
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jsr     _pal_fade_to
;
; frisk_map_box.width=16;
;
	ldx     #$00
	lda     #$10
	sta     _frisk_map_box+2
;
; frisk_map_box.height=8;
;
	ldx     #$00
	lda     #$08
	sta     _frisk_map_box+3
;
; while(1){
;
	jmp     L0007
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if(state == 0){
;
	ldx     #$00
	lda     _state
	cmp     #$00
	jsr     booleq
	jeq     L0006
;
; if(pad1 & PAD_START){
;
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$10
	stx     tmp1
	ora     tmp1
	jeq     L0006
;
; music_stop();
;
	jsr     _music_stop
;
; music_play(1);
;
	lda     #$01
	jsr     _music_play
;
; pal_fade_to(4,0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; state = 1;
;
	ldx     #$00
	lda     #$01
	sta     _state
;
; if(state == 1){
;
L0006:	ldx     #$00
	lda     _state
	cmp     #$01
	jsr     booleq
	jeq     L0007
;
; if(pal_had_fade_not == 0){
;
	ldx     #$00
	lda     _pal_had_fade_not
	cmp     #$00
	jsr     booleq
	jeq     L0008
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jsr     _pal_fade_to
;
; pal_had_fade_not = 1;
;
	ldx     #$00
	lda     #$01
	sta     _pal_had_fade_not
;
; if((pad1 & PAD_LEFT)&&(player_x>=0x02)){
;
L0008:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$02
	stx     tmp1
	ora     tmp1
	jeq     L000A
	ldx     #$00
	lda     _player_x
	cmp     #$02
	lda     #$00
	ldx     #$00
	rol     a
	jne     L000B
L000A:	ldx     #$00
	lda     #$00
	jeq     L000C
L000B:	ldx     #$00
	lda     #$01
L000C:	jeq     L0009
;
; frisk_face = 2;
;
	ldx     #$00
	lda     #$02
	sta     _frisk_face
;
; player_x=player_x-1;
;
	ldx     #$00
	lda     _player_x
	jsr     decax1
	ldx     #$00
	sta     _player_x
;
; else if((pad1 & PAD_RIGHT)&&(player_x<=0xF0)){
;
	jmp     L000E
L0009:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$01
	stx     tmp1
	ora     tmp1
	jeq     L000F
	ldx     #$00
	lda     _player_x
	cmp     #$F1
	jsr     boolult
	jne     L0010
L000F:	ldx     #$00
	lda     #$00
	jeq     L0011
L0010:	ldx     #$00
	lda     #$01
L0011:	jeq     L000E
;
; frisk_face = 3;
;
	ldx     #$00
	lda     #$03
	sta     _frisk_face
;
; player_x=player_x+1;
;
	ldx     #$00
	lda     _player_x
	jsr     incax1
	ldx     #$00
	sta     _player_x
;
; if((pad1 & PAD_UP)&&(player_y>=0x02)){
;
L000E:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$08
	stx     tmp1
	ora     tmp1
	jeq     L0013
	ldx     #$00
	lda     _player_y
	cmp     #$02
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0014
L0013:	ldx     #$00
	lda     #$00
	jeq     L0015
L0014:	ldx     #$00
	lda     #$01
L0015:	jeq     L0012
;
; frisk_face = 1;
;
	ldx     #$00
	lda     #$01
	sta     _frisk_face
;
; player_y=player_y-1;
;
	ldx     #$00
	lda     _player_y
	jsr     decax1
	ldx     #$00
	sta     _player_y
;
; else if((pad1 & PAD_DOWN)&&(player_y<=0xC5)){
;
	jmp     L0017
L0012:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$04
	stx     tmp1
	ora     tmp1
	jeq     L0018
	ldx     #$00
	lda     _player_y
	cmp     #$C6
	jsr     boolult
	jne     L0019
L0018:	ldx     #$00
	lda     #$00
	jeq     L001A
L0019:	ldx     #$00
	lda     #$01
L001A:	jeq     L0017
;
; frisk_face = 0;
;
	ldx     #$00
	lda     #$00
	sta     _frisk_face
;
; player_y=player_y+1;
;
	ldx     #$00
	lda     _player_y
	jsr     incax1
	ldx     #$00
	sta     _player_y
;
; if(!(pad1 & PAD_LEFT)&&!(pad1 & PAD_RIGHT)&&!(pad1 & PAD_UP)&&!(pad1 & PAD_DOWN)){
;
L0017:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$02
	jsr     bnegax
	jeq     L001C
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$01
	jsr     bnegax
	jeq     L001C
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$08
	jsr     bnegax
	jeq     L001C
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$04
	jsr     bnegax
	jne     L001D
L001C:	ldx     #$00
	lda     #$00
	jeq     L001E
L001D:	ldx     #$00
	lda     #$01
L001E:	jeq     L001B
;
; frisk_frame = 0;
;
	ldx     #$00
	lda     #$00
	sta     _frisk_frame
;
; frisk_frame_wait = 0;
;
	ldx     #$00
	lda     #$00
	sta     _frisk_frame_wait
;
; else
;
	jmp     L001F
;
; frisk_frame_change();
;
L001B:	jsr     _frisk_frame_change
;
; map_frisk_collison=0;
;
L001F:	ldx     #$00
	lda     #$00
	sta     _map_frisk_collison
;
; frisk_map_box.x = player_x;
;
	ldx     #$00
	lda     _player_x
	sta     _frisk_map_box
;
; frisk_map_box.y = player_y+24;
;
	ldx     #$00
	lda     _player_y
	ldy     #$18
	jsr     incaxy
	ldx     #$00
	sta     _frisk_map_box+1
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(player_x, player_y , frisk[frisk_face][frisk_frame]);
;
	lda     _player_x
	jsr     pusha
	lda     _player_y
	jsr     pusha
	ldx     #$00
	lda     _frisk_face
	jsr     aslax3
	clc
	adc     #<(_frisk)
	tay
	txa
	adc     #>(_frisk)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _frisk_frame
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	jsr     _oam_meta_spr
;
; oam_meta_spr(120, 100 , flowey_talk[0]);
;
	lda     #$78
	jsr     pusha
	lda     #$64
	jsr     pusha
	lda     _flowey_talk
	ldx     _flowey_talk+1
	jsr     _oam_meta_spr
;
; while(1){
;
L0007:	jmp     L0002
;
; }
;
	rts

.endproc

