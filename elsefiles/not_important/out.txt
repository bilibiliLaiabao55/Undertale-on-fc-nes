ca65 V2.19 - Git 216bb22
Main file   : elsefiles/NOT_IMPORTANT/PRG_ROM.s
Current file: elsefiles/NOT_IMPORTANT/PRG_ROM.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 216bb22
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_pal_all
000000r 1               	.import		_ppu_wait_nmi
000000r 1               	.import		_ppu_off
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_oam_clear
000000r 1               	.import		_oam_meta_spr
000000r 1               	.import		_music_play
000000r 1               	.import		_pad_poll
000000r 1               	.export		_frisk_down_0_data
000000r 1               	.export		_frisk_down_1_data
000000r 1               	.export		_frisk_down_2_data
000000r 1               	.export		_frisk_left_0_data
000000r 1               	.export		_frisk_left_1_data
000000r 1               	.export		_frisk_right_0_data
000000r 1               	.export		_frisk_right_1_data
000000r 1               	.export		_frisk_up_0_data
000000r 1               	.export		_frisk_up_1_data
000000r 1               	.export		_frisk_up_2_data
000000r 1               	.export		_frisk
000000r 1               	.export		_player_x
000000r 1               	.export		_player_y
000000r 1               	.export		_pad1
000000r 1               	.export		_frisk_frame
000000r 1               	.export		_frisk_frame_wait
000000r 1               	.export		_frisk_face
000000r 1               	.export		_state
000000r 1               	.export		_map_frisk_collison
000000r 1               	.export		_tempL
000000r 1               	.export		_tempR
000000r 1               	.export		_tempT
000000r 1               	.export		_tempD
000000r 1               	.export		_frisk_map_box
000000r 1               	.export		_LEFT_COLLISON
000000r 1               	.export		_RIGHT_COLLISON
000000r 1               	.export		_UP_COLLISON
000000r 1               	.export		_DOWN_COLLISON
000000r 1               	.export		_palette
000000r 1               	.export		_frisk_frame_change
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _player_x:
000000r 1  00           	.byte	$00
000001r 1               _player_y:
000001r 1  00           	.byte	$00
000002r 1               _frisk_frame:
000002r 1  00           	.byte	$00
000003r 1               _frisk_frame_wait:
000003r 1  00           	.byte	$00
000004r 1               _frisk_face:
000004r 1  00           	.byte	$00
000005r 1               _state:
000005r 1  01           	.byte	$01
000006r 1               _map_frisk_collison:
000006r 1  00           	.byte	$00
000007r 1               
000007r 1               .segment	"RODATA"
000000r 1               
000000r 1               _frisk_down_0_data:
000000r 1  00           	.byte	$00
000001r 1  00           	.byte	$00
000002r 1  01           	.byte	$01
000003r 1  00           	.byte	$00
000004r 1  08           	.byte	$08
000005r 1  00           	.byte	$00
000006r 1  02           	.byte	$02
000007r 1  00           	.byte	$00
000008r 1  00           	.byte	$00
000009r 1  08           	.byte	$08
00000Ar 1  03           	.byte	$03
00000Br 1  00           	.byte	$00
00000Cr 1  08           	.byte	$08
00000Dr 1  08           	.byte	$08
00000Er 1  04           	.byte	$04
00000Fr 1  00           	.byte	$00
000010r 1  00           	.byte	$00
000011r 1  10           	.byte	$10
000012r 1  05           	.byte	$05
000013r 1  00           	.byte	$00
000014r 1  08           	.byte	$08
000015r 1  10           	.byte	$10
000016r 1  06           	.byte	$06
000017r 1  00           	.byte	$00
000018r 1  00           	.byte	$00
000019r 1  18           	.byte	$18
00001Ar 1  07           	.byte	$07
00001Br 1  00           	.byte	$00
00001Cr 1  08           	.byte	$08
00001Dr 1  18           	.byte	$18
00001Er 1  08           	.byte	$08
00001Fr 1  00           	.byte	$00
000020r 1  80           	.byte	$80
000021r 1               _frisk_down_1_data:
000021r 1  00           	.byte	$00
000022r 1  01           	.byte	$01
000023r 1  01           	.byte	$01
000024r 1  00           	.byte	$00
000025r 1  08           	.byte	$08
000026r 1  01           	.byte	$01
000027r 1  02           	.byte	$02
000028r 1  00           	.byte	$00
000029r 1  00           	.byte	$00
00002Ar 1  09           	.byte	$09
00002Br 1  03           	.byte	$03
00002Cr 1  00           	.byte	$00
00002Dr 1  08           	.byte	$08
00002Er 1  09           	.byte	$09
00002Fr 1  04           	.byte	$04
000030r 1  00           	.byte	$00
000031r 1  00           	.byte	$00
000032r 1  11           	.byte	$11
000033r 1  09           	.byte	$09
000034r 1  00           	.byte	$00
000035r 1  08           	.byte	$08
000036r 1  11           	.byte	$11
000037r 1  06           	.byte	$06
000038r 1  00           	.byte	$00
000039r 1  00           	.byte	$00
00003Ar 1  19           	.byte	$19
00003Br 1  0A           	.byte	$0A
00003Cr 1  00           	.byte	$00
00003Dr 1  08           	.byte	$08
00003Er 1  19           	.byte	$19
00003Fr 1  0B           	.byte	$0B
000040r 1  00           	.byte	$00
000041r 1  80           	.byte	$80
000042r 1               _frisk_down_2_data:
000042r 1  00           	.byte	$00
000043r 1  01           	.byte	$01
000044r 1  01           	.byte	$01
000045r 1  00           	.byte	$00
000046r 1  08           	.byte	$08
000047r 1  01           	.byte	$01
000048r 1  02           	.byte	$02
000049r 1  00           	.byte	$00
00004Ar 1  00           	.byte	$00
00004Br 1  09           	.byte	$09
00004Cr 1  03           	.byte	$03
00004Dr 1  00           	.byte	$00
00004Er 1  08           	.byte	$08
00004Fr 1  09           	.byte	$09
000050r 1  04           	.byte	$04
000051r 1  00           	.byte	$00
000052r 1  00           	.byte	$00
000053r 1  11           	.byte	$11
000054r 1  05           	.byte	$05
000055r 1  00           	.byte	$00
000056r 1  08           	.byte	$08
000057r 1  11           	.byte	$11
000058r 1  0C           	.byte	$0C
000059r 1  00           	.byte	$00
00005Ar 1  00           	.byte	$00
00005Br 1  19           	.byte	$19
00005Cr 1  0D           	.byte	$0D
00005Dr 1  00           	.byte	$00
00005Er 1  08           	.byte	$08
00005Fr 1  19           	.byte	$19
000060r 1  0E           	.byte	$0E
000061r 1  00           	.byte	$00
000062r 1  80           	.byte	$80
000063r 1               _frisk_left_0_data:
000063r 1  00           	.byte	$00
000064r 1  00           	.byte	$00
000065r 1  0F           	.byte	$0F
000066r 1  00           	.byte	$00
000067r 1  08           	.byte	$08
000068r 1  00           	.byte	$00
000069r 1  10           	.byte	$10
00006Ar 1  00           	.byte	$00
00006Br 1  00           	.byte	$00
00006Cr 1  08           	.byte	$08
00006Dr 1  11           	.byte	$11
00006Er 1  00           	.byte	$00
00006Fr 1  08           	.byte	$08
000070r 1  08           	.byte	$08
000071r 1  12           	.byte	$12
000072r 1  00           	.byte	$00
000073r 1  00           	.byte	$00
000074r 1  10           	.byte	$10
000075r 1  13           	.byte	$13
000076r 1  00           	.byte	$00
000077r 1  08           	.byte	$08
000078r 1  10           	.byte	$10
000079r 1  14           	.byte	$14
00007Ar 1  00           	.byte	$00
00007Br 1  00           	.byte	$00
00007Cr 1  18           	.byte	$18
00007Dr 1  15           	.byte	$15
00007Er 1  00           	.byte	$00
00007Fr 1  08           	.byte	$08
000080r 1  18           	.byte	$18
000081r 1  16           	.byte	$16
000082r 1  00           	.byte	$00
000083r 1  80           	.byte	$80
000084r 1               _frisk_left_1_data:
000084r 1  00           	.byte	$00
000085r 1  01           	.byte	$01
000086r 1  0F           	.byte	$0F
000087r 1  00           	.byte	$00
000088r 1  08           	.byte	$08
000089r 1  01           	.byte	$01
00008Ar 1  10           	.byte	$10
00008Br 1  00           	.byte	$00
00008Cr 1  00           	.byte	$00
00008Dr 1  09           	.byte	$09
00008Er 1  11           	.byte	$11
00008Fr 1  00           	.byte	$00
000090r 1  08           	.byte	$08
000091r 1  09           	.byte	$09
000092r 1  12           	.byte	$12
000093r 1  00           	.byte	$00
000094r 1  00           	.byte	$00
000095r 1  11           	.byte	$11
000096r 1  17           	.byte	$17
000097r 1  00           	.byte	$00
000098r 1  08           	.byte	$08
000099r 1  11           	.byte	$11
00009Ar 1  18           	.byte	$18
00009Br 1  00           	.byte	$00
00009Cr 1  00           	.byte	$00
00009Dr 1  19           	.byte	$19
00009Er 1  19           	.byte	$19
00009Fr 1  00           	.byte	$00
0000A0r 1  08           	.byte	$08
0000A1r 1  19           	.byte	$19
0000A2r 1  1A           	.byte	$1A
0000A3r 1  00           	.byte	$00
0000A4r 1  80           	.byte	$80
0000A5r 1               _frisk_right_0_data:
0000A5r 1  08           	.byte	$08
0000A6r 1  00           	.byte	$00
0000A7r 1  0F           	.byte	$0F
0000A8r 1  40           	.byte	$40
0000A9r 1  00           	.byte	$00
0000AAr 1  00           	.byte	$00
0000ABr 1  10           	.byte	$10
0000ACr 1  40           	.byte	$40
0000ADr 1  08           	.byte	$08
0000AEr 1  08           	.byte	$08
0000AFr 1  11           	.byte	$11
0000B0r 1  40           	.byte	$40
0000B1r 1  00           	.byte	$00
0000B2r 1  08           	.byte	$08
0000B3r 1  12           	.byte	$12
0000B4r 1  40           	.byte	$40
0000B5r 1  08           	.byte	$08
0000B6r 1  10           	.byte	$10
0000B7r 1  13           	.byte	$13
0000B8r 1  40           	.byte	$40
0000B9r 1  00           	.byte	$00
0000BAr 1  10           	.byte	$10
0000BBr 1  14           	.byte	$14
0000BCr 1  40           	.byte	$40
0000BDr 1  08           	.byte	$08
0000BEr 1  18           	.byte	$18
0000BFr 1  15           	.byte	$15
0000C0r 1  40           	.byte	$40
0000C1r 1  00           	.byte	$00
0000C2r 1  18           	.byte	$18
0000C3r 1  16           	.byte	$16
0000C4r 1  40           	.byte	$40
0000C5r 1  80           	.byte	$80
0000C6r 1               _frisk_right_1_data:
0000C6r 1  08           	.byte	$08
0000C7r 1  01           	.byte	$01
0000C8r 1  0F           	.byte	$0F
0000C9r 1  40           	.byte	$40
0000CAr 1  00           	.byte	$00
0000CBr 1  01           	.byte	$01
0000CCr 1  10           	.byte	$10
0000CDr 1  40           	.byte	$40
0000CEr 1  08           	.byte	$08
0000CFr 1  09           	.byte	$09
0000D0r 1  11           	.byte	$11
0000D1r 1  40           	.byte	$40
0000D2r 1  00           	.byte	$00
0000D3r 1  09           	.byte	$09
0000D4r 1  12           	.byte	$12
0000D5r 1  40           	.byte	$40
0000D6r 1  08           	.byte	$08
0000D7r 1  11           	.byte	$11
0000D8r 1  17           	.byte	$17
0000D9r 1  40           	.byte	$40
0000DAr 1  00           	.byte	$00
0000DBr 1  11           	.byte	$11
0000DCr 1  18           	.byte	$18
0000DDr 1  40           	.byte	$40
0000DEr 1  08           	.byte	$08
0000DFr 1  19           	.byte	$19
0000E0r 1  19           	.byte	$19
0000E1r 1  40           	.byte	$40
0000E2r 1  00           	.byte	$00
0000E3r 1  19           	.byte	$19
0000E4r 1  1A           	.byte	$1A
0000E5r 1  40           	.byte	$40
0000E6r 1  80           	.byte	$80
0000E7r 1               _frisk_up_0_data:
0000E7r 1  00           	.byte	$00
0000E8r 1  00           	.byte	$00
0000E9r 1  1D           	.byte	$1D
0000EAr 1  00           	.byte	$00
0000EBr 1  08           	.byte	$08
0000ECr 1  00           	.byte	$00
0000EDr 1  1E           	.byte	$1E
0000EEr 1  00           	.byte	$00
0000EFr 1  00           	.byte	$00
0000F0r 1  08           	.byte	$08
0000F1r 1  1F           	.byte	$1F
0000F2r 1  00           	.byte	$00
0000F3r 1  08           	.byte	$08
0000F4r 1  08           	.byte	$08
0000F5r 1  20           	.byte	$20
0000F6r 1  00           	.byte	$00
0000F7r 1  08           	.byte	$08
0000F8r 1  10           	.byte	$10
0000F9r 1  1C           	.byte	$1C
0000FAr 1  00           	.byte	$00
0000FBr 1  00           	.byte	$00
0000FCr 1  10           	.byte	$10
0000FDr 1  1B           	.byte	$1B
0000FEr 1  00           	.byte	$00
0000FFr 1  09           	.byte	$09
000100r 1  18           	.byte	$18
000101r 1  07           	.byte	$07
000102r 1  40           	.byte	$40
000103r 1  01           	.byte	$01
000104r 1  18           	.byte	$18
000105r 1  08           	.byte	$08
000106r 1  40           	.byte	$40
000107r 1  80           	.byte	$80
000108r 1               _frisk_up_1_data:
000108r 1  00           	.byte	$00
000109r 1  01           	.byte	$01
00010Ar 1  1D           	.byte	$1D
00010Br 1  00           	.byte	$00
00010Cr 1  08           	.byte	$08
00010Dr 1  01           	.byte	$01
00010Er 1  1E           	.byte	$1E
00010Fr 1  00           	.byte	$00
000110r 1  00           	.byte	$00
000111r 1  09           	.byte	$09
000112r 1  1F           	.byte	$1F
000113r 1  00           	.byte	$00
000114r 1  08           	.byte	$08
000115r 1  09           	.byte	$09
000116r 1  20           	.byte	$20
000117r 1  00           	.byte	$00
000118r 1  08           	.byte	$08
000119r 1  11           	.byte	$11
00011Ar 1  21           	.byte	$21
00011Br 1  00           	.byte	$00
00011Cr 1  00           	.byte	$00
00011Dr 1  11           	.byte	$11
00011Er 1  1B           	.byte	$1B
00011Fr 1  00           	.byte	$00
000120r 1  09           	.byte	$09
000121r 1  19           	.byte	$19
000122r 1  22           	.byte	$22
000123r 1  40           	.byte	$40
000124r 1  01           	.byte	$01
000125r 1  19           	.byte	$19
000126r 1  23           	.byte	$23
000127r 1  40           	.byte	$40
000128r 1  80           	.byte	$80
000129r 1               _frisk_up_2_data:
000129r 1  00           	.byte	$00
00012Ar 1  01           	.byte	$01
00012Br 1  1D           	.byte	$1D
00012Cr 1  00           	.byte	$00
00012Dr 1  08           	.byte	$08
00012Er 1  01           	.byte	$01
00012Fr 1  1E           	.byte	$1E
000130r 1  00           	.byte	$00
000131r 1  00           	.byte	$00
000132r 1  09           	.byte	$09
000133r 1  1F           	.byte	$1F
000134r 1  00           	.byte	$00
000135r 1  08           	.byte	$08
000136r 1  09           	.byte	$09
000137r 1  20           	.byte	$20
000138r 1  00           	.byte	$00
000139r 1  00           	.byte	$00
00013Ar 1  11           	.byte	$11
00013Br 1  24           	.byte	$24
00013Cr 1  00           	.byte	$00
00013Dr 1  08           	.byte	$08
00013Er 1  11           	.byte	$11
00013Fr 1  1C           	.byte	$1C
000140r 1  00           	.byte	$00
000141r 1  00           	.byte	$00
000142r 1  19           	.byte	$19
000143r 1  22           	.byte	$22
000144r 1  00           	.byte	$00
000145r 1  08           	.byte	$08
000146r 1  19           	.byte	$19
000147r 1  23           	.byte	$23
000148r 1  00           	.byte	$00
000149r 1  80           	.byte	$80
00014Ar 1               _frisk:
00014Ar 1  rr rr        	.addr	_frisk_down_0_data
00014Cr 1  rr rr        	.addr	_frisk_down_1_data
00014Er 1  rr rr        	.addr	_frisk_down_0_data
000150r 1  rr rr        	.addr	_frisk_down_2_data
000152r 1  rr rr        	.addr	_frisk_up_0_data
000154r 1  rr rr        	.addr	_frisk_up_1_data
000156r 1  rr rr        	.addr	_frisk_up_0_data
000158r 1  rr rr        	.addr	_frisk_up_2_data
00015Ar 1  rr rr        	.addr	_frisk_left_0_data
00015Cr 1  rr rr        	.addr	_frisk_left_1_data
00015Er 1  rr rr        	.addr	_frisk_left_0_data
000160r 1  rr rr        	.addr	_frisk_left_1_data
000162r 1  rr rr        	.addr	_frisk_right_0_data
000164r 1  rr rr        	.addr	_frisk_right_1_data
000166r 1  rr rr        	.addr	_frisk_right_0_data
000168r 1  rr rr        	.addr	_frisk_right_1_data
00016Ar 1               _LEFT_COLLISON:
00016Ar 1  01           	.byte	$01
00016Br 1               _RIGHT_COLLISON:
00016Br 1  02           	.byte	$02
00016Cr 1               _UP_COLLISON:
00016Cr 1  04           	.byte	$04
00016Dr 1               _DOWN_COLLISON:
00016Dr 1  08           	.byte	$08
00016Er 1               _palette:
00016Er 1  14           	.byte	$14
00016Fr 1  30           	.byte	$30
000170r 1  24           	.byte	$24
000171r 1  19           	.byte	$19
000172r 1  14           	.byte	$14
000173r 1  1C           	.byte	$1C
000174r 1  15           	.byte	$15
000175r 1  2A           	.byte	$2A
000176r 1  14           	.byte	$14
000177r 1  06           	.byte	$06
000178r 1  27           	.byte	$27
000179r 1  2C           	.byte	$2C
00017Ar 1  14           	.byte	$14
00017Br 1  06           	.byte	$06
00017Cr 1  27           	.byte	$27
00017Dr 1  2C           	.byte	$2C
00017Er 1  14           	.byte	$14
00017Fr 1  06           	.byte	$06
000180r 1  27           	.byte	$27
000181r 1  2C           	.byte	$2C
000182r 1  14           	.byte	$14
000183r 1  06           	.byte	$06
000184r 1  27           	.byte	$27
000185r 1  2C           	.byte	$2C
000186r 1  14           	.byte	$14
000187r 1  06           	.byte	$06
000188r 1  27           	.byte	$27
000189r 1  2C           	.byte	$2C
00018Ar 1  14           	.byte	$14
00018Br 1  06           	.byte	$06
00018Cr 1  27           	.byte	$27
00018Dr 1  2C           	.byte	$2C
00018Er 1               
00018Er 1               .segment	"BSS"
000000r 1               
000000r 1               _pad1:
000000r 1  00           	.res	1,$00
000001r 1               _tempL:
000001r 1  00           	.res	1,$00
000002r 1               _tempR:
000002r 1  00           	.res	1,$00
000003r 1               _tempT:
000003r 1  00           	.res	1,$00
000004r 1               _tempD:
000004r 1  00           	.res	1,$00
000005r 1               _frisk_map_box:
000005r 1  00 00 00 00  	.res	4,$00
000009r 1               
000009r 1               ; ---------------------------------------------------------------
000009r 1               ; void __near__ frisk_frame_change (void)
000009r 1               ; ---------------------------------------------------------------
000009r 1               
000009r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_frisk_frame_change: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; if (frisk_frame_wait == 10){
000000r 1               ;
000000r 1  A2 00        	ldx     #$00
000002r 1  AD rr rr     	lda     _frisk_frame_wait
000005r 1  C9 0A        	cmp     #$0A
000007r 1  20 rr rr     	jsr     booleq
00000Ar 1  D0 03 4C rr  	jeq     L0002
00000Er 1  rr           
00000Fr 1               ;
00000Fr 1               ; frisk_frame_wait=0;
00000Fr 1               ;
00000Fr 1  A2 00        	ldx     #$00
000011r 1  A9 00        	lda     #$00
000013r 1  8D rr rr     	sta     _frisk_frame_wait
000016r 1               ;
000016r 1               ; if(frisk_frame<3)
000016r 1               ;
000016r 1  A2 00        	ldx     #$00
000018r 1  AD rr rr     	lda     _frisk_frame
00001Br 1  C9 03        	cmp     #$03
00001Dr 1  20 rr rr     	jsr     boolult
000020r 1  D0 03 4C rr  	jeq     L0003
000024r 1  rr           
000025r 1               ;
000025r 1               ; frisk_frame = frisk_frame+1;
000025r 1               ;
000025r 1  A2 00        	ldx     #$00
000027r 1  AD rr rr     	lda     _frisk_frame
00002Ar 1  20 rr rr     	jsr     incax1
00002Dr 1  A2 00        	ldx     #$00
00002Fr 1  8D rr rr     	sta     _frisk_frame
000032r 1               ;
000032r 1               ; else
000032r 1               ;
000032r 1  4C rr rr     	jmp     L0004
000035r 1               ;
000035r 1               ; frisk_frame = 0;
000035r 1               ;
000035r 1  A2 00        L0003:	ldx     #$00
000037r 1  A9 00        	lda     #$00
000039r 1  8D rr rr     	sta     _frisk_frame
00003Cr 1               ;
00003Cr 1               ; else
00003Cr 1               ;
00003Cr 1  4C rr rr     L0004:	jmp     L0005
00003Fr 1               ;
00003Fr 1               ; frisk_frame_wait = frisk_frame_wait + 1;
00003Fr 1               ;
00003Fr 1  A2 00        L0002:	ldx     #$00
000041r 1  AD rr rr     	lda     _frisk_frame_wait
000044r 1  20 rr rr     	jsr     incax1
000047r 1  A2 00        	ldx     #$00
000049r 1  8D rr rr     	sta     _frisk_frame_wait
00004Cr 1               ;
00004Cr 1               ; }
00004Cr 1               ;
00004Cr 1  60           L0005:	rts
00004Dr 1               
00004Dr 1               .endproc
00004Dr 1               
00004Dr 1               ; ---------------------------------------------------------------
00004Dr 1               ; void __near__ main (void)
00004Dr 1               ; ---------------------------------------------------------------
00004Dr 1               
00004Dr 1               .segment	"CODE"
00004Dr 1               
00004Dr 1               .proc	_main: near
00004Dr 1               
00004Dr 1               .segment	"CODE"
00004Dr 1               
00004Dr 1               ;
00004Dr 1               ; music_play(3);
00004Dr 1               ;
00004Dr 1  A9 03        	lda     #$03
00004Fr 1  20 rr rr     	jsr     _music_play
000052r 1               ;
000052r 1               ; ppu_off();
000052r 1               ;
000052r 1  20 rr rr     	jsr     _ppu_off
000055r 1               ;
000055r 1               ; pal_all(palette);
000055r 1               ;
000055r 1  A9 rr        	lda     #<(_palette)
000057r 1  A2 rr        	ldx     #>(_palette)
000059r 1  20 rr rr     	jsr     _pal_all
00005Cr 1               ;
00005Cr 1               ; ppu_on_all();
00005Cr 1               ;
00005Cr 1  20 rr rr     	jsr     _ppu_on_all
00005Fr 1               ;
00005Fr 1               ; frisk_map_box.width=16;
00005Fr 1               ;
00005Fr 1  A2 00        	ldx     #$00
000061r 1  A9 10        	lda     #$10
000063r 1  8D rr rr     	sta     _frisk_map_box+2
000066r 1               ;
000066r 1               ; frisk_map_box.height=8;
000066r 1               ;
000066r 1  A2 00        	ldx     #$00
000068r 1  A9 08        	lda     #$08
00006Ar 1  8D rr rr     	sta     _frisk_map_box+3
00006Dr 1               ;
00006Dr 1               ; while(1){
00006Dr 1               ;
00006Dr 1  4C rr rr     	jmp     L0004
000070r 1               ;
000070r 1               ; ppu_wait_nmi();
000070r 1               ;
000070r 1  20 rr rr     L0002:	jsr     _ppu_wait_nmi
000073r 1               ;
000073r 1               ; if(state & 0x01){}
000073r 1               ;
000073r 1  A2 00        	ldx     #$00
000075r 1  AD rr rr     	lda     _state
000078r 1  A2 00        	ldx     #$00
00007Ar 1  29 01        	and     #$01
00007Cr 1  86 rr        	stx     tmp1
00007Er 1  05 rr        	ora     tmp1
000080r 1  D0 03 4C rr  	jeq     L0005
000084r 1  rr           
000085r 1               ;
000085r 1               ; pad1 = pad_poll(0);
000085r 1               ;
000085r 1  A9 00        L0005:	lda     #$00
000087r 1  20 rr rr     	jsr     _pad_poll
00008Ar 1  8D rr rr     	sta     _pad1
00008Dr 1               ;
00008Dr 1               ; if(pad1 & PAD_LEFT){
00008Dr 1               ;
00008Dr 1  A2 00        	ldx     #$00
00008Fr 1  AD rr rr     	lda     _pad1
000092r 1  A2 00        	ldx     #$00
000094r 1  29 02        	and     #$02
000096r 1  86 rr        	stx     tmp1
000098r 1  05 rr        	ora     tmp1
00009Ar 1  D0 03 4C rr  	jeq     L0006
00009Er 1  rr           
00009Fr 1               ;
00009Fr 1               ; frisk_face = 2;
00009Fr 1               ;
00009Fr 1  A2 00        	ldx     #$00
0000A1r 1  A9 02        	lda     #$02
0000A3r 1  8D rr rr     	sta     _frisk_face
0000A6r 1               ;
0000A6r 1               ; player_x=player_x-1;
0000A6r 1               ;
0000A6r 1  A2 00        	ldx     #$00
0000A8r 1  AD rr rr     	lda     _player_x
0000ABr 1  20 rr rr     	jsr     decax1
0000AEr 1  A2 00        	ldx     #$00
0000B0r 1  8D rr rr     	sta     _player_x
0000B3r 1               ;
0000B3r 1               ; else if(pad1 & PAD_RIGHT){
0000B3r 1               ;
0000B3r 1  4C rr rr     	jmp     L0008
0000B6r 1  A2 00        L0006:	ldx     #$00
0000B8r 1  AD rr rr     	lda     _pad1
0000BBr 1  A2 00        	ldx     #$00
0000BDr 1  29 01        	and     #$01
0000BFr 1  86 rr        	stx     tmp1
0000C1r 1  05 rr        	ora     tmp1
0000C3r 1  D0 03 4C rr  	jeq     L0008
0000C7r 1  rr           
0000C8r 1               ;
0000C8r 1               ; frisk_face = 3;
0000C8r 1               ;
0000C8r 1  A2 00        	ldx     #$00
0000CAr 1  A9 03        	lda     #$03
0000CCr 1  8D rr rr     	sta     _frisk_face
0000CFr 1               ;
0000CFr 1               ; player_x=player_x+1;
0000CFr 1               ;
0000CFr 1  A2 00        	ldx     #$00
0000D1r 1  AD rr rr     	lda     _player_x
0000D4r 1  20 rr rr     	jsr     incax1
0000D7r 1  A2 00        	ldx     #$00
0000D9r 1  8D rr rr     	sta     _player_x
0000DCr 1               ;
0000DCr 1               ; if(pad1 & PAD_UP){
0000DCr 1               ;
0000DCr 1  A2 00        L0008:	ldx     #$00
0000DEr 1  AD rr rr     	lda     _pad1
0000E1r 1  A2 00        	ldx     #$00
0000E3r 1  29 08        	and     #$08
0000E5r 1  86 rr        	stx     tmp1
0000E7r 1  05 rr        	ora     tmp1
0000E9r 1  D0 03 4C rr  	jeq     L0009
0000EDr 1  rr           
0000EEr 1               ;
0000EEr 1               ; frisk_face = 1;
0000EEr 1               ;
0000EEr 1  A2 00        	ldx     #$00
0000F0r 1  A9 01        	lda     #$01
0000F2r 1  8D rr rr     	sta     _frisk_face
0000F5r 1               ;
0000F5r 1               ; player_y=player_y-1;
0000F5r 1               ;
0000F5r 1  A2 00        	ldx     #$00
0000F7r 1  AD rr rr     	lda     _player_y
0000FAr 1  20 rr rr     	jsr     decax1
0000FDr 1  A2 00        	ldx     #$00
0000FFr 1  8D rr rr     	sta     _player_y
000102r 1               ;
000102r 1               ; else if(pad1 & PAD_DOWN){
000102r 1               ;
000102r 1  4C rr rr     	jmp     L000B
000105r 1  A2 00        L0009:	ldx     #$00
000107r 1  AD rr rr     	lda     _pad1
00010Ar 1  A2 00        	ldx     #$00
00010Cr 1  29 04        	and     #$04
00010Er 1  86 rr        	stx     tmp1
000110r 1  05 rr        	ora     tmp1
000112r 1  D0 03 4C rr  	jeq     L000B
000116r 1  rr           
000117r 1               ;
000117r 1               ; frisk_face = 0;
000117r 1               ;
000117r 1  A2 00        	ldx     #$00
000119r 1  A9 00        	lda     #$00
00011Br 1  8D rr rr     	sta     _frisk_face
00011Er 1               ;
00011Er 1               ; player_y=player_y+1;
00011Er 1               ;
00011Er 1  A2 00        	ldx     #$00
000120r 1  AD rr rr     	lda     _player_y
000123r 1  20 rr rr     	jsr     incax1
000126r 1  A2 00        	ldx     #$00
000128r 1  8D rr rr     	sta     _player_y
00012Br 1               ;
00012Br 1               ; if(!(pad1 & PAD_LEFT)&&!(pad1 & PAD_RIGHT)&&!(pad1 & PAD_UP)&&!(pad1 & PAD_DOWN)){
00012Br 1               ;
00012Br 1  A2 00        L000B:	ldx     #$00
00012Dr 1  AD rr rr     	lda     _pad1
000130r 1  A2 00        	ldx     #$00
000132r 1  29 02        	and     #$02
000134r 1  20 rr rr     	jsr     bnegax
000137r 1  D0 03 4C rr  	jeq     L000D
00013Br 1  rr           
00013Cr 1  A2 00        	ldx     #$00
00013Er 1  AD rr rr     	lda     _pad1
000141r 1  A2 00        	ldx     #$00
000143r 1  29 01        	and     #$01
000145r 1  20 rr rr     	jsr     bnegax
000148r 1  D0 03 4C rr  	jeq     L000D
00014Cr 1  rr           
00014Dr 1  A2 00        	ldx     #$00
00014Fr 1  AD rr rr     	lda     _pad1
000152r 1  A2 00        	ldx     #$00
000154r 1  29 08        	and     #$08
000156r 1  20 rr rr     	jsr     bnegax
000159r 1  D0 03 4C rr  	jeq     L000D
00015Dr 1  rr           
00015Er 1  A2 00        	ldx     #$00
000160r 1  AD rr rr     	lda     _pad1
000163r 1  A2 00        	ldx     #$00
000165r 1  29 04        	and     #$04
000167r 1  20 rr rr     	jsr     bnegax
00016Ar 1  F0 03 4C rr  	jne     L000E
00016Er 1  rr           
00016Fr 1  A2 00        L000D:	ldx     #$00
000171r 1  A9 00        	lda     #$00
000173r 1  D0 03 4C rr  	jeq     L000F
000177r 1  rr           
000178r 1  A2 00        L000E:	ldx     #$00
00017Ar 1  A9 01        	lda     #$01
00017Cr 1  D0 03 4C rr  L000F:	jeq     L000C
000180r 1  rr           
000181r 1               ;
000181r 1               ; frisk_frame = 0;
000181r 1               ;
000181r 1  A2 00        	ldx     #$00
000183r 1  A9 00        	lda     #$00
000185r 1  8D rr rr     	sta     _frisk_frame
000188r 1               ;
000188r 1               ; frisk_frame_wait = 0;
000188r 1               ;
000188r 1  A2 00        	ldx     #$00
00018Ar 1  A9 00        	lda     #$00
00018Cr 1  8D rr rr     	sta     _frisk_frame_wait
00018Fr 1               ;
00018Fr 1               ; else
00018Fr 1               ;
00018Fr 1  4C rr rr     	jmp     L0010
000192r 1               ;
000192r 1               ; frisk_frame_change();
000192r 1               ;
000192r 1  20 rr rr     L000C:	jsr     _frisk_frame_change
000195r 1               ;
000195r 1               ; map_frisk_collison=0;
000195r 1               ;
000195r 1  A2 00        L0010:	ldx     #$00
000197r 1  A9 00        	lda     #$00
000199r 1  8D rr rr     	sta     _map_frisk_collison
00019Cr 1               ;
00019Cr 1               ; frisk_map_box.x = player_x;
00019Cr 1               ;
00019Cr 1  A2 00        	ldx     #$00
00019Er 1  AD rr rr     	lda     _player_x
0001A1r 1  8D rr rr     	sta     _frisk_map_box
0001A4r 1               ;
0001A4r 1               ; frisk_map_box.y = player_y+24;
0001A4r 1               ;
0001A4r 1  A2 00        	ldx     #$00
0001A6r 1  AD rr rr     	lda     _player_y
0001A9r 1  A0 18        	ldy     #$18
0001ABr 1  20 rr rr     	jsr     incaxy
0001AEr 1  A2 00        	ldx     #$00
0001B0r 1  8D rr rr     	sta     _frisk_map_box+1
0001B3r 1               ;
0001B3r 1               ; oam_clear();
0001B3r 1               ;
0001B3r 1  20 rr rr     	jsr     _oam_clear
0001B6r 1               ;
0001B6r 1               ; oam_meta_spr(player_x, player_y , frisk[frisk_face][frisk_frame]);
0001B6r 1               ;
0001B6r 1  AD rr rr     	lda     _player_x
0001B9r 1  20 rr rr     	jsr     pusha
0001BCr 1  AD rr rr     	lda     _player_y
0001BFr 1  20 rr rr     	jsr     pusha
0001C2r 1  A2 00        	ldx     #$00
0001C4r 1  AD rr rr     	lda     _frisk_face
0001C7r 1  20 rr rr     	jsr     aslax3
0001CAr 1  18           	clc
0001CBr 1  69 rr        	adc     #<(_frisk)
0001CDr 1  A8           	tay
0001CEr 1  8A           	txa
0001CFr 1  69 rr        	adc     #>(_frisk)
0001D1r 1  AA           	tax
0001D2r 1  98           	tya
0001D3r 1  20 rr rr     	jsr     pushax
0001D6r 1  A2 00        	ldx     #$00
0001D8r 1  AD rr rr     	lda     _frisk_frame
0001DBr 1  20 rr rr     	jsr     aslax1
0001DEr 1  20 rr rr     	jsr     tosaddax
0001E1r 1  A0 01        	ldy     #$01
0001E3r 1  20 rr rr     	jsr     ldaxidx
0001E6r 1  20 rr rr     	jsr     _oam_meta_spr
0001E9r 1               ;
0001E9r 1               ; while(1){
0001E9r 1               ;
0001E9r 1  4C rr rr     L0004:	jmp     L0002
0001ECr 1               ;
0001ECr 1               ; }
0001ECr 1               ;
0001ECr 1  60           	rts
0001EDr 1               
0001EDr 1               .endproc
0001EDr 1               
0001EDr 1               
