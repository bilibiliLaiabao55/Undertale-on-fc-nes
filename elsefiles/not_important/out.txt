ca65 V2.19 - Git 216bb22
Main file   : elsefiles/NOT_IMPORTANT/PRG_ROM.s
Current file: elsefiles/NOT_IMPORTANT/PRG_ROM.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 216bb22
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_pal_all
000000r 1               	.import		_ppu_wait_nmi
000000r 1               	.import		_ppu_off
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_oam_clear
000000r 1               	.import		_oam_meta_spr
000000r 1               	.import		_pad_poll
000000r 1               	.export		_player_x
000000r 1               	.export		_player_y
000000r 1               	.export		_pad1
000000r 1               	.export		_frisk_frame
000000r 1               	.export		_frisk_frame_wait
000000r 1               	.export		_frisk_face
000000r 1               	.export		_palette
000000r 1               	.export		_frisk_down_0_data
000000r 1               	.export		_frisk_down_1_data
000000r 1               	.export		_frisk_down_2_data
000000r 1               	.export		_frisk_down_3_data
000000r 1               	.export		_frisk_down
000000r 1               	.export		_frisk_frame_change
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _player_x:
000000r 1  00           	.byte	$00
000001r 1               _player_y:
000001r 1  00           	.byte	$00
000002r 1               _frisk_frame:
000002r 1  00           	.byte	$00
000003r 1               _frisk_frame_wait:
000003r 1  00           	.byte	$00
000004r 1               _frisk_face:
000004r 1  00           	.byte	$00
000005r 1               
000005r 1               .segment	"RODATA"
000000r 1               
000000r 1               _palette:
000000r 1  14           	.byte	$14
000001r 1  30           	.byte	$30
000002r 1  24           	.byte	$24
000003r 1  19           	.byte	$19
000004r 1  14           	.byte	$14
000005r 1  1C           	.byte	$1C
000006r 1  15           	.byte	$15
000007r 1  2A           	.byte	$2A
000008r 1  14           	.byte	$14
000009r 1  06           	.byte	$06
00000Ar 1  27           	.byte	$27
00000Br 1  2C           	.byte	$2C
00000Cr 1  14           	.byte	$14
00000Dr 1  06           	.byte	$06
00000Er 1  27           	.byte	$27
00000Fr 1  2C           	.byte	$2C
000010r 1  14           	.byte	$14
000011r 1  06           	.byte	$06
000012r 1  27           	.byte	$27
000013r 1  2C           	.byte	$2C
000014r 1  14           	.byte	$14
000015r 1  06           	.byte	$06
000016r 1  27           	.byte	$27
000017r 1  2C           	.byte	$2C
000018r 1  14           	.byte	$14
000019r 1  06           	.byte	$06
00001Ar 1  27           	.byte	$27
00001Br 1  2C           	.byte	$2C
00001Cr 1  14           	.byte	$14
00001Dr 1  06           	.byte	$06
00001Er 1  27           	.byte	$27
00001Fr 1  2C           	.byte	$2C
000020r 1               _frisk_down_0_data:
000020r 1  00           	.byte	$00
000021r 1  00           	.byte	$00
000022r 1  01           	.byte	$01
000023r 1  00           	.byte	$00
000024r 1  08           	.byte	$08
000025r 1  00           	.byte	$00
000026r 1  02           	.byte	$02
000027r 1  00           	.byte	$00
000028r 1  00           	.byte	$00
000029r 1  08           	.byte	$08
00002Ar 1  03           	.byte	$03
00002Br 1  00           	.byte	$00
00002Cr 1  08           	.byte	$08
00002Dr 1  08           	.byte	$08
00002Er 1  04           	.byte	$04
00002Fr 1  00           	.byte	$00
000030r 1  00           	.byte	$00
000031r 1  10           	.byte	$10
000032r 1  05           	.byte	$05
000033r 1  00           	.byte	$00
000034r 1  08           	.byte	$08
000035r 1  10           	.byte	$10
000036r 1  06           	.byte	$06
000037r 1  00           	.byte	$00
000038r 1  00           	.byte	$00
000039r 1  18           	.byte	$18
00003Ar 1  07           	.byte	$07
00003Br 1  00           	.byte	$00
00003Cr 1  08           	.byte	$08
00003Dr 1  18           	.byte	$18
00003Er 1  08           	.byte	$08
00003Fr 1  00           	.byte	$00
000040r 1  80           	.byte	$80
000041r 1               _frisk_down_1_data:
000041r 1  00           	.byte	$00
000042r 1  00           	.byte	$00
000043r 1  01           	.byte	$01
000044r 1  00           	.byte	$00
000045r 1  08           	.byte	$08
000046r 1  00           	.byte	$00
000047r 1  02           	.byte	$02
000048r 1  00           	.byte	$00
000049r 1  00           	.byte	$00
00004Ar 1  08           	.byte	$08
00004Br 1  03           	.byte	$03
00004Cr 1  00           	.byte	$00
00004Dr 1  08           	.byte	$08
00004Er 1  08           	.byte	$08
00004Fr 1  04           	.byte	$04
000050r 1  00           	.byte	$00
000051r 1  00           	.byte	$00
000052r 1  10           	.byte	$10
000053r 1  09           	.byte	$09
000054r 1  00           	.byte	$00
000055r 1  08           	.byte	$08
000056r 1  10           	.byte	$10
000057r 1  06           	.byte	$06
000058r 1  00           	.byte	$00
000059r 1  00           	.byte	$00
00005Ar 1  18           	.byte	$18
00005Br 1  0A           	.byte	$0A
00005Cr 1  00           	.byte	$00
00005Dr 1  08           	.byte	$08
00005Er 1  18           	.byte	$18
00005Fr 1  0B           	.byte	$0B
000060r 1  00           	.byte	$00
000061r 1  80           	.byte	$80
000062r 1               _frisk_down_2_data:
000062r 1  00           	.byte	$00
000063r 1  00           	.byte	$00
000064r 1  01           	.byte	$01
000065r 1  00           	.byte	$00
000066r 1  08           	.byte	$08
000067r 1  00           	.byte	$00
000068r 1  02           	.byte	$02
000069r 1  00           	.byte	$00
00006Ar 1  00           	.byte	$00
00006Br 1  08           	.byte	$08
00006Cr 1  03           	.byte	$03
00006Dr 1  00           	.byte	$00
00006Er 1  08           	.byte	$08
00006Fr 1  08           	.byte	$08
000070r 1  04           	.byte	$04
000071r 1  00           	.byte	$00
000072r 1  00           	.byte	$00
000073r 1  10           	.byte	$10
000074r 1  05           	.byte	$05
000075r 1  00           	.byte	$00
000076r 1  08           	.byte	$08
000077r 1  10           	.byte	$10
000078r 1  06           	.byte	$06
000079r 1  00           	.byte	$00
00007Ar 1  00           	.byte	$00
00007Br 1  18           	.byte	$18
00007Cr 1  07           	.byte	$07
00007Dr 1  00           	.byte	$00
00007Er 1  08           	.byte	$08
00007Fr 1  18           	.byte	$18
000080r 1  08           	.byte	$08
000081r 1  00           	.byte	$00
000082r 1  80           	.byte	$80
000083r 1               _frisk_down_3_data:
000083r 1  00           	.byte	$00
000084r 1  00           	.byte	$00
000085r 1  01           	.byte	$01
000086r 1  00           	.byte	$00
000087r 1  08           	.byte	$08
000088r 1  00           	.byte	$00
000089r 1  02           	.byte	$02
00008Ar 1  00           	.byte	$00
00008Br 1  00           	.byte	$00
00008Cr 1  08           	.byte	$08
00008Dr 1  03           	.byte	$03
00008Er 1  00           	.byte	$00
00008Fr 1  08           	.byte	$08
000090r 1  08           	.byte	$08
000091r 1  04           	.byte	$04
000092r 1  00           	.byte	$00
000093r 1  00           	.byte	$00
000094r 1  10           	.byte	$10
000095r 1  05           	.byte	$05
000096r 1  00           	.byte	$00
000097r 1  08           	.byte	$08
000098r 1  10           	.byte	$10
000099r 1  0C           	.byte	$0C
00009Ar 1  00           	.byte	$00
00009Br 1  00           	.byte	$00
00009Cr 1  18           	.byte	$18
00009Dr 1  0D           	.byte	$0D
00009Er 1  00           	.byte	$00
00009Fr 1  08           	.byte	$08
0000A0r 1  18           	.byte	$18
0000A1r 1  0E           	.byte	$0E
0000A2r 1  00           	.byte	$00
0000A3r 1  80           	.byte	$80
0000A4r 1               _frisk_down:
0000A4r 1  rr rr        	.addr	_frisk_down_0_data
0000A6r 1  rr rr        	.addr	_frisk_down_1_data
0000A8r 1  rr rr        	.addr	_frisk_down_2_data
0000AAr 1  rr rr        	.addr	_frisk_down_3_data
0000ACr 1               
0000ACr 1               .segment	"BSS"
000000r 1               
000000r 1               _pad1:
000000r 1  00           	.res	1,$00
000001r 1               
000001r 1               ; ---------------------------------------------------------------
000001r 1               ; void __near__ frisk_frame_change (void)
000001r 1               ; ---------------------------------------------------------------
000001r 1               
000001r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_frisk_frame_change: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; if (frisk_frame_wait == 10){
000000r 1               ;
000000r 1  A2 00        	ldx     #$00
000002r 1  AD rr rr     	lda     _frisk_frame_wait
000005r 1  C9 0A        	cmp     #$0A
000007r 1  20 rr rr     	jsr     booleq
00000Ar 1  D0 03 4C rr  	jeq     L0002
00000Er 1  rr           
00000Fr 1               ;
00000Fr 1               ; frisk_frame_wait=0;
00000Fr 1               ;
00000Fr 1  A2 00        	ldx     #$00
000011r 1  A9 00        	lda     #$00
000013r 1  8D rr rr     	sta     _frisk_frame_wait
000016r 1               ;
000016r 1               ; if(frisk_frame<3)
000016r 1               ;
000016r 1  A2 00        	ldx     #$00
000018r 1  AD rr rr     	lda     _frisk_frame
00001Br 1  C9 03        	cmp     #$03
00001Dr 1  20 rr rr     	jsr     boolult
000020r 1  D0 03 4C rr  	jeq     L0003
000024r 1  rr           
000025r 1               ;
000025r 1               ; frisk_frame = frisk_frame+1;
000025r 1               ;
000025r 1  A2 00        	ldx     #$00
000027r 1  AD rr rr     	lda     _frisk_frame
00002Ar 1  20 rr rr     	jsr     incax1
00002Dr 1  A2 00        	ldx     #$00
00002Fr 1  8D rr rr     	sta     _frisk_frame
000032r 1               ;
000032r 1               ; else
000032r 1               ;
000032r 1  4C rr rr     	jmp     L0004
000035r 1               ;
000035r 1               ; frisk_frame = 0;
000035r 1               ;
000035r 1  A2 00        L0003:	ldx     #$00
000037r 1  A9 00        	lda     #$00
000039r 1  8D rr rr     	sta     _frisk_frame
00003Cr 1               ;
00003Cr 1               ; else
00003Cr 1               ;
00003Cr 1  4C rr rr     L0004:	jmp     L0005
00003Fr 1               ;
00003Fr 1               ; frisk_frame_wait = frisk_frame_wait + 1;
00003Fr 1               ;
00003Fr 1  A2 00        L0002:	ldx     #$00
000041r 1  AD rr rr     	lda     _frisk_frame_wait
000044r 1  20 rr rr     	jsr     incax1
000047r 1  A2 00        	ldx     #$00
000049r 1  8D rr rr     	sta     _frisk_frame_wait
00004Cr 1               ;
00004Cr 1               ; }
00004Cr 1               ;
00004Cr 1  60           L0005:	rts
00004Dr 1               
00004Dr 1               .endproc
00004Dr 1               
00004Dr 1               ; ---------------------------------------------------------------
00004Dr 1               ; void __near__ main (void)
00004Dr 1               ; ---------------------------------------------------------------
00004Dr 1               
00004Dr 1               .segment	"CODE"
00004Dr 1               
00004Dr 1               .proc	_main: near
00004Dr 1               
00004Dr 1               .segment	"CODE"
00004Dr 1               
00004Dr 1               ;
00004Dr 1               ; ppu_off();
00004Dr 1               ;
00004Dr 1  20 rr rr     	jsr     _ppu_off
000050r 1               ;
000050r 1               ; pal_all(palette);
000050r 1               ;
000050r 1  A9 rr        	lda     #<(_palette)
000052r 1  A2 rr        	ldx     #>(_palette)
000054r 1  20 rr rr     	jsr     _pal_all
000057r 1               ;
000057r 1               ; ppu_on_all();
000057r 1               ;
000057r 1  20 rr rr     	jsr     _ppu_on_all
00005Ar 1               ;
00005Ar 1               ; while(1){
00005Ar 1               ;
00005Ar 1  4C rr rr     	jmp     L0004
00005Dr 1               ;
00005Dr 1               ; ppu_wait_nmi();
00005Dr 1               ;
00005Dr 1  20 rr rr     L0002:	jsr     _ppu_wait_nmi
000060r 1               ;
000060r 1               ; pad1 = pad_poll(0);
000060r 1               ;
000060r 1  A9 00        	lda     #$00
000062r 1  20 rr rr     	jsr     _pad_poll
000065r 1  8D rr rr     	sta     _pad1
000068r 1               ;
000068r 1               ; if(pad1 & PAD_LEFT){
000068r 1               ;
000068r 1  A2 00        	ldx     #$00
00006Ar 1  AD rr rr     	lda     _pad1
00006Dr 1  A2 00        	ldx     #$00
00006Fr 1  29 02        	and     #$02
000071r 1  86 rr        	stx     tmp1
000073r 1  05 rr        	ora     tmp1
000075r 1  D0 03 4C rr  	jeq     L0005
000079r 1  rr           
00007Ar 1               ;
00007Ar 1               ; player_x=player_x-1;
00007Ar 1               ;
00007Ar 1  A2 00        	ldx     #$00
00007Cr 1  AD rr rr     	lda     _player_x
00007Fr 1  20 rr rr     	jsr     decax1
000082r 1  A2 00        	ldx     #$00
000084r 1  8D rr rr     	sta     _player_x
000087r 1               ;
000087r 1               ; else if(pad1 & PAD_RIGHT){
000087r 1               ;
000087r 1  4C rr rr     	jmp     L0007
00008Ar 1  A2 00        L0005:	ldx     #$00
00008Cr 1  AD rr rr     	lda     _pad1
00008Fr 1  A2 00        	ldx     #$00
000091r 1  29 01        	and     #$01
000093r 1  86 rr        	stx     tmp1
000095r 1  05 rr        	ora     tmp1
000097r 1  D0 03 4C rr  	jeq     L0007
00009Br 1  rr           
00009Cr 1               ;
00009Cr 1               ; player_x=player_x+1;
00009Cr 1               ;
00009Cr 1  A2 00        	ldx     #$00
00009Er 1  AD rr rr     	lda     _player_x
0000A1r 1  20 rr rr     	jsr     incax1
0000A4r 1  A2 00        	ldx     #$00
0000A6r 1  8D rr rr     	sta     _player_x
0000A9r 1               ;
0000A9r 1               ; if(pad1 & PAD_UP){
0000A9r 1               ;
0000A9r 1  A2 00        L0007:	ldx     #$00
0000ABr 1  AD rr rr     	lda     _pad1
0000AEr 1  A2 00        	ldx     #$00
0000B0r 1  29 08        	and     #$08
0000B2r 1  86 rr        	stx     tmp1
0000B4r 1  05 rr        	ora     tmp1
0000B6r 1  D0 03 4C rr  	jeq     L0008
0000BAr 1  rr           
0000BBr 1               ;
0000BBr 1               ; player_y=player_y-1;
0000BBr 1               ;
0000BBr 1  A2 00        	ldx     #$00
0000BDr 1  AD rr rr     	lda     _player_y
0000C0r 1  20 rr rr     	jsr     decax1
0000C3r 1  A2 00        	ldx     #$00
0000C5r 1  8D rr rr     	sta     _player_y
0000C8r 1               ;
0000C8r 1               ; else if(pad1 & PAD_DOWN){
0000C8r 1               ;
0000C8r 1  4C rr rr     	jmp     L000A
0000CBr 1  A2 00        L0008:	ldx     #$00
0000CDr 1  AD rr rr     	lda     _pad1
0000D0r 1  A2 00        	ldx     #$00
0000D2r 1  29 04        	and     #$04
0000D4r 1  86 rr        	stx     tmp1
0000D6r 1  05 rr        	ora     tmp1
0000D8r 1  D0 03 4C rr  	jeq     L000A
0000DCr 1  rr           
0000DDr 1               ;
0000DDr 1               ; player_y=player_y+1;
0000DDr 1               ;
0000DDr 1  A2 00        	ldx     #$00
0000DFr 1  AD rr rr     	lda     _player_y
0000E2r 1  20 rr rr     	jsr     incax1
0000E5r 1  A2 00        	ldx     #$00
0000E7r 1  8D rr rr     	sta     _player_y
0000EAr 1               ;
0000EAr 1               ; if(!(pad1 & PAD_LEFT)&&!(pad1 & PAD_RIGHT)&&!(pad1 & PAD_UP)&&!(pad1 & PAD_DOWN)){
0000EAr 1               ;
0000EAr 1  A2 00        L000A:	ldx     #$00
0000ECr 1  AD rr rr     	lda     _pad1
0000EFr 1  A2 00        	ldx     #$00
0000F1r 1  29 02        	and     #$02
0000F3r 1  20 rr rr     	jsr     bnegax
0000F6r 1  D0 03 4C rr  	jeq     L000C
0000FAr 1  rr           
0000FBr 1  A2 00        	ldx     #$00
0000FDr 1  AD rr rr     	lda     _pad1
000100r 1  A2 00        	ldx     #$00
000102r 1  29 01        	and     #$01
000104r 1  20 rr rr     	jsr     bnegax
000107r 1  D0 03 4C rr  	jeq     L000C
00010Br 1  rr           
00010Cr 1  A2 00        	ldx     #$00
00010Er 1  AD rr rr     	lda     _pad1
000111r 1  A2 00        	ldx     #$00
000113r 1  29 08        	and     #$08
000115r 1  20 rr rr     	jsr     bnegax
000118r 1  D0 03 4C rr  	jeq     L000C
00011Cr 1  rr           
00011Dr 1  A2 00        	ldx     #$00
00011Fr 1  AD rr rr     	lda     _pad1
000122r 1  A2 00        	ldx     #$00
000124r 1  29 04        	and     #$04
000126r 1  20 rr rr     	jsr     bnegax
000129r 1  F0 03 4C rr  	jne     L000D
00012Dr 1  rr           
00012Er 1  A2 00        L000C:	ldx     #$00
000130r 1  A9 00        	lda     #$00
000132r 1  D0 03 4C rr  	jeq     L000E
000136r 1  rr           
000137r 1  A2 00        L000D:	ldx     #$00
000139r 1  A9 01        	lda     #$01
00013Br 1  D0 03 4C rr  L000E:	jeq     L000B
00013Fr 1  rr           
000140r 1               ;
000140r 1               ; frisk_frame=0;
000140r 1               ;
000140r 1  A2 00        	ldx     #$00
000142r 1  A9 00        	lda     #$00
000144r 1  8D rr rr     	sta     _frisk_frame
000147r 1               ;
000147r 1               ; frisk_frame_wait=0;
000147r 1               ;
000147r 1  A2 00        	ldx     #$00
000149r 1  A9 00        	lda     #$00
00014Br 1  8D rr rr     	sta     _frisk_frame_wait
00014Er 1               ;
00014Er 1               ; else
00014Er 1               ;
00014Er 1  4C rr rr     	jmp     L000F
000151r 1               ;
000151r 1               ; frisk_frame_change();
000151r 1               ;
000151r 1  20 rr rr     L000B:	jsr     _frisk_frame_change
000154r 1               ;
000154r 1               ; oam_clear();
000154r 1               ;
000154r 1  20 rr rr     L000F:	jsr     _oam_clear
000157r 1               ;
000157r 1               ; oam_meta_spr(player_x, player_y , frisk_down[frisk_frame]);
000157r 1               ;
000157r 1  AD rr rr     	lda     _player_x
00015Ar 1  20 rr rr     	jsr     pusha
00015Dr 1  AD rr rr     	lda     _player_y
000160r 1  20 rr rr     	jsr     pusha
000163r 1  A2 00        	ldx     #$00
000165r 1  AD rr rr     	lda     _frisk_frame
000168r 1  20 rr rr     	jsr     aslax1
00016Br 1  18           	clc
00016Cr 1  69 rr        	adc     #<(_frisk_down)
00016Er 1  A8           	tay
00016Fr 1  8A           	txa
000170r 1  69 rr        	adc     #>(_frisk_down)
000172r 1  AA           	tax
000173r 1  98           	tya
000174r 1  A0 01        	ldy     #$01
000176r 1  20 rr rr     	jsr     ldaxidx
000179r 1  20 rr rr     	jsr     _oam_meta_spr
00017Cr 1               ;
00017Cr 1               ; while(1){
00017Cr 1               ;
00017Cr 1  4C rr rr     L0004:	jmp     L0002
00017Fr 1               ;
00017Fr 1               ; }
00017Fr 1               ;
00017Fr 1  60           	rts
000180r 1               
000180r 1               .endproc
000180r 1               
000180r 1               
