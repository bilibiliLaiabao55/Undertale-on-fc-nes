ca65 V2.19 - Git 216bb22
Main file   : elsefiles/NOT_IMPORTANT/PRG_ROM.s
Current file: elsefiles/NOT_IMPORTANT/PRG_ROM.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 216bb22
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 216bb22"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_pal_all
000000r 1               	.import		_ppu_wait_nmi
000000r 1               	.import		_ppu_off
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_oam_clear
000000r 1               	.import		_oam_meta_spr
000000r 1               	.import		_pad_poll
000000r 1               	.export		_player_x
000000r 1               	.export		_player_y
000000r 1               	.export		_pad1
000000r 1               	.export		_palette
000000r 1               	.export		_frisk_down_0
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _player_x:
000000r 1  00           	.byte	$00
000001r 1               _player_y:
000001r 1  00           	.byte	$00
000002r 1               
000002r 1               .segment	"RODATA"
000000r 1               
000000r 1               _palette:
000000r 1  14           	.byte	$14
000001r 1  30           	.byte	$30
000002r 1  24           	.byte	$24
000003r 1  19           	.byte	$19
000004r 1  14           	.byte	$14
000005r 1  1C           	.byte	$1C
000006r 1  15           	.byte	$15
000007r 1  2A           	.byte	$2A
000008r 1  14           	.byte	$14
000009r 1  06           	.byte	$06
00000Ar 1  27           	.byte	$27
00000Br 1  2C           	.byte	$2C
00000Cr 1  14           	.byte	$14
00000Dr 1  06           	.byte	$06
00000Er 1  27           	.byte	$27
00000Fr 1  2C           	.byte	$2C
000010r 1  14           	.byte	$14
000011r 1  06           	.byte	$06
000012r 1  27           	.byte	$27
000013r 1  2C           	.byte	$2C
000014r 1  14           	.byte	$14
000015r 1  06           	.byte	$06
000016r 1  27           	.byte	$27
000017r 1  2C           	.byte	$2C
000018r 1  14           	.byte	$14
000019r 1  06           	.byte	$06
00001Ar 1  27           	.byte	$27
00001Br 1  2C           	.byte	$2C
00001Cr 1  14           	.byte	$14
00001Dr 1  06           	.byte	$06
00001Er 1  27           	.byte	$27
00001Fr 1  2C           	.byte	$2C
000020r 1               _frisk_down_0:
000020r 1  00           	.byte	$00
000021r 1  00           	.byte	$00
000022r 1  01           	.byte	$01
000023r 1  00           	.byte	$00
000024r 1  08           	.byte	$08
000025r 1  00           	.byte	$00
000026r 1  02           	.byte	$02
000027r 1  00           	.byte	$00
000028r 1  00           	.byte	$00
000029r 1  08           	.byte	$08
00002Ar 1  03           	.byte	$03
00002Br 1  00           	.byte	$00
00002Cr 1  08           	.byte	$08
00002Dr 1  08           	.byte	$08
00002Er 1  04           	.byte	$04
00002Fr 1  00           	.byte	$00
000030r 1  00           	.byte	$00
000031r 1  10           	.byte	$10
000032r 1  05           	.byte	$05
000033r 1  00           	.byte	$00
000034r 1  08           	.byte	$08
000035r 1  10           	.byte	$10
000036r 1  06           	.byte	$06
000037r 1  00           	.byte	$00
000038r 1  00           	.byte	$00
000039r 1  18           	.byte	$18
00003Ar 1  07           	.byte	$07
00003Br 1  00           	.byte	$00
00003Cr 1  08           	.byte	$08
00003Dr 1  18           	.byte	$18
00003Er 1  08           	.byte	$08
00003Fr 1  00           	.byte	$00
000040r 1  80           	.byte	$80
000041r 1               
000041r 1               .segment	"BSS"
000000r 1               
000000r 1               _pad1:
000000r 1  00           	.res	1,$00
000001r 1               
000001r 1               ; ---------------------------------------------------------------
000001r 1               ; void __near__ main (void)
000001r 1               ; ---------------------------------------------------------------
000001r 1               
000001r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; ppu_off();
000000r 1               ;
000000r 1  20 rr rr     	jsr     _ppu_off
000003r 1               ;
000003r 1               ; pal_all(palette);
000003r 1               ;
000003r 1  A9 rr        	lda     #<(_palette)
000005r 1  A2 rr        	ldx     #>(_palette)
000007r 1  20 rr rr     	jsr     _pal_all
00000Ar 1               ;
00000Ar 1               ; oam_clear();
00000Ar 1               ;
00000Ar 1  20 rr rr     	jsr     _oam_clear
00000Dr 1               ;
00000Dr 1               ; oam_meta_spr(player_x, player_y,0, frisk_down_0);
00000Dr 1               ;
00000Dr 1  AD rr rr     	lda     _player_x
000010r 1  20 rr rr     	jsr     pusha
000013r 1  AD rr rr     	lda     _player_y
000016r 1  20 rr rr     	jsr     pusha
000019r 1  A9 00        	lda     #$00
00001Br 1  20 rr rr     	jsr     pusha
00001Er 1  A9 rr        	lda     #<(_frisk_down_0)
000020r 1  A2 rr        	ldx     #>(_frisk_down_0)
000022r 1  20 rr rr     	jsr     _oam_meta_spr
000025r 1               ;
000025r 1               ; ppu_on_all();
000025r 1               ;
000025r 1  20 rr rr     	jsr     _ppu_on_all
000028r 1               ;
000028r 1               ; while(1){
000028r 1               ;
000028r 1  4C rr rr     	jmp     L0004
00002Br 1               ;
00002Br 1               ; ppu_wait_nmi();
00002Br 1               ;
00002Br 1  20 rr rr     L0002:	jsr     _ppu_wait_nmi
00002Er 1               ;
00002Er 1               ; pad1 = pad_poll(0);
00002Er 1               ;
00002Er 1  A9 00        	lda     #$00
000030r 1  20 rr rr     	jsr     _pad_poll
000033r 1  8D rr rr     	sta     _pad1
000036r 1               ;
000036r 1               ; if(pad1 & PAD_LEFT)
000036r 1               ;
000036r 1  A2 00        	ldx     #$00
000038r 1  AD rr rr     	lda     _pad1
00003Br 1  A2 00        	ldx     #$00
00003Dr 1  29 02        	and     #$02
00003Fr 1  86 rr        	stx     tmp1
000041r 1  05 rr        	ora     tmp1
000043r 1  D0 03 4C rr  	jeq     L0005
000047r 1  rr           
000048r 1               ;
000048r 1               ; player_x--;
000048r 1               ;
000048r 1  A2 00        	ldx     #$00
00004Ar 1  AD rr rr     	lda     _player_x
00004Dr 1  CE rr rr     	dec     _player_x
000050r 1               ;
000050r 1               ; if(pad1 & PAD_RIGHT)
000050r 1               ;
000050r 1  A2 00        L0005:	ldx     #$00
000052r 1  AD rr rr     	lda     _pad1
000055r 1  A2 00        	ldx     #$00
000057r 1  29 01        	and     #$01
000059r 1  86 rr        	stx     tmp1
00005Br 1  05 rr        	ora     tmp1
00005Dr 1  D0 03 4C rr  	jeq     L0006
000061r 1  rr           
000062r 1               ;
000062r 1               ; player_x++;
000062r 1               ;
000062r 1  A2 00        	ldx     #$00
000064r 1  AD rr rr     	lda     _player_x
000067r 1  EE rr rr     	inc     _player_x
00006Ar 1               ;
00006Ar 1               ; if(pad1 & PAD_UP)
00006Ar 1               ;
00006Ar 1  A2 00        L0006:	ldx     #$00
00006Cr 1  AD rr rr     	lda     _pad1
00006Fr 1  A2 00        	ldx     #$00
000071r 1  29 08        	and     #$08
000073r 1  86 rr        	stx     tmp1
000075r 1  05 rr        	ora     tmp1
000077r 1  D0 03 4C rr  	jeq     L0007
00007Br 1  rr           
00007Cr 1               ;
00007Cr 1               ; player_y--;
00007Cr 1               ;
00007Cr 1  A2 00        	ldx     #$00
00007Er 1  AD rr rr     	lda     _player_y
000081r 1  CE rr rr     	dec     _player_y
000084r 1               ;
000084r 1               ; if(pad1 & PAD_DOWN)
000084r 1               ;
000084r 1  A2 00        L0007:	ldx     #$00
000086r 1  AD rr rr     	lda     _pad1
000089r 1  A2 00        	ldx     #$00
00008Br 1  29 04        	and     #$04
00008Dr 1  86 rr        	stx     tmp1
00008Fr 1  05 rr        	ora     tmp1
000091r 1  D0 03 4C rr  	jeq     L0008
000095r 1  rr           
000096r 1               ;
000096r 1               ; player_y++;
000096r 1               ;
000096r 1  A2 00        	ldx     #$00
000098r 1  AD rr rr     	lda     _player_y
00009Br 1  EE rr rr     	inc     _player_y
00009Er 1               ;
00009Er 1               ; oam_meta_spr(player_x, player_y,0, frisk_down_0);
00009Er 1               ;
00009Er 1  AD rr rr     L0008:	lda     _player_x
0000A1r 1  20 rr rr     	jsr     pusha
0000A4r 1  AD rr rr     	lda     _player_y
0000A7r 1  20 rr rr     	jsr     pusha
0000AAr 1  A9 00        	lda     #$00
0000ACr 1  20 rr rr     	jsr     pusha
0000AFr 1  A9 rr        	lda     #<(_frisk_down_0)
0000B1r 1  A2 rr        	ldx     #>(_frisk_down_0)
0000B3r 1  20 rr rr     	jsr     _oam_meta_spr
0000B6r 1               ;
0000B6r 1               ; while(1){
0000B6r 1               ;
0000B6r 1  4C rr rr     L0004:	jmp     L0002
0000B9r 1               ;
0000B9r 1               ; }
0000B9r 1               ;
0000B9r 1  60           	rts
0000BAr 1               
0000BAr 1               .endproc
0000BAr 1               
0000BAr 1               
